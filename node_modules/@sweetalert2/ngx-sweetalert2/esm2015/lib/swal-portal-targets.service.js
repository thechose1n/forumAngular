import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Represents an object of targets for <swal> portals (use with *swalPortal directive).
 * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is
 * shown, so this object lets us reference those functions safely and in a statically-typed manner.
 */
let SwalPortalTargets = class SwalPortalTargets {
    constructor() {
        /**
         * Targets the modal close button block contents.
         */
        this.closeButton = {
            element: swal => swal.getCloseButton(),
            options: { showCloseButton: true }
        };
        /**
         * Targets the modal title block contents.
         */
        this.title = {
            element: swal => swal.getTitle(),
            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
            options: { title: ' ' }
        };
        /**
         * Targets the modal text block contents (that is another block inside the first content block, so you can still
         * use other modal features like Swal inputs, that are situated inside that parent content block).
         */
        this.content = {
            element: swal => swal.getHtmlContainer(),
            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
            options: { text: ' ' }
        };
        /**
         * Targets the actions block contents, where are the confirm and cancel buttons in a normal time.
         * /!\ WARNING: using this target destroys some of the native SweetAlert2 modal's DOM, therefore, if you use this
         *     target, do not update the modal via <swal> @Inputs while the modal is open, or you'll get an error.
         *     We could workaround that inconvenient inside this integration, but that'd be detrimental to memory and
         *     performance of everyone, for a relatively rare use case.
         */
        this.actions = {
            element: swal => swal.getActions(),
            // The button will never exist, but SweetAlert2 shows the actions block only if there is at least one button.
            options: { showConfirmButton: true }
        };
        /**
         * Targets the confirm button contents, replacing the text inside it (not the button itself)
         */
        this.confirmButton = {
            element: swal => swal.getConfirmButton(),
            options: { showConfirmButton: true }
        };
        /**
         * Targets the cancel button contents, replacing the text inside it (not the button itself)
         */
        this.cancelButton = {
            element: swal => swal.getCancelButton(),
            options: { showCancelButton: true }
        };
        /**
         * Targets the modal footer contents.
         */
        this.footer = {
            element: swal => swal.getFooter(),
            // Empty text that will never be shown but necessary so SweetAlert2 makes the div visible.
            options: { footer: ' ' }
        };
    }
};
SwalPortalTargets.ɵprov = i0.ɵɵdefineInjectable({ factory: function SwalPortalTargets_Factory() { return new SwalPortalTargets(); }, token: SwalPortalTargets, providedIn: "root" });
SwalPortalTargets = __decorate([
    Injectable({ providedIn: 'root' })
], SwalPortalTargets);
export { SwalPortalTargets };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC1wb3J0YWwtdGFyZ2V0cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHN3ZWV0YWxlcnQyL25neC1zd2VldGFsZXJ0Mi8iLCJzb3VyY2VzIjpbImxpYi9zd2FsLXBvcnRhbC10YXJnZXRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBUTNDOzs7O0dBSUc7QUFFSCxJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtJQUE5QjtRQUNJOztXQUVHO1FBQ2EsZ0JBQVcsR0FBcUI7WUFDNUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN0QyxPQUFPLEVBQUUsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFO1NBQ3JDLENBQUM7UUFFRjs7V0FFRztRQUNhLFVBQUssR0FBcUI7WUFDdEMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNoQywwRkFBMEY7WUFDMUYsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtTQUMxQixDQUFDO1FBRUY7OztXQUdHO1FBQ2EsWUFBTyxHQUFxQjtZQUN4QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDeEMsMEZBQTBGO1lBQzFGLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUU7U0FDekIsQ0FBQztRQUVGOzs7Ozs7V0FNRztRQUNhLFlBQU8sR0FBcUI7WUFDeEMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNsQyw2R0FBNkc7WUFDN0csT0FBTyxFQUFFLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFO1NBQ3ZDLENBQUM7UUFFRjs7V0FFRztRQUNhLGtCQUFhLEdBQXFCO1lBQzlDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4QyxPQUFPLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUU7U0FDdkMsQ0FBQztRQUVGOztXQUVHO1FBQ2EsaUJBQVksR0FBcUI7WUFDN0MsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN2QyxPQUFPLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUU7U0FDdEMsQ0FBQztRQUVGOztXQUVHO1FBQ2EsV0FBTSxHQUFxQjtZQUN2QyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pDLDBGQUEwRjtZQUMxRixPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO1NBQzNCLENBQUM7S0FDTDtDQUFBLENBQUE7O0FBakVZLGlCQUFpQjtJQUQ3QixVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUM7R0FDdEIsaUJBQWlCLENBaUU3QjtTQWpFWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgU3dhbCwgeyBTd2VldEFsZXJ0T3B0aW9ucyB9IGZyb20gJ3N3ZWV0YWxlcnQyJztcblxuZXhwb3J0IGludGVyZmFjZSBTd2FsUG9ydGFsVGFyZ2V0IHtcbiAgICBvcHRpb25zPzogU3dlZXRBbGVydE9wdGlvbnM7XG4gICAgZWxlbWVudChzd2FsOiB0eXBlb2YgU3dhbCk6IEhUTUxFbGVtZW50O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gb2JqZWN0IG9mIHRhcmdldHMgZm9yIDxzd2FsPiBwb3J0YWxzICh1c2Ugd2l0aCAqc3dhbFBvcnRhbCBkaXJlY3RpdmUpLlxuICogV2UgbXVzdCB1c2UgdGh1bmtzIHRvIGFjY2VzcyB0aGUgU3dhbC4qIGZ1bmN0aW9ucyBsaXN0ZWQgYmVsb3csIGJlY2F1c2UgdGhleSBnZXQgY3JlYXRlZCBhZnRlciB0aGUgZmlyc3QgbW9kYWwgaXNcbiAqIHNob3duLCBzbyB0aGlzIG9iamVjdCBsZXRzIHVzIHJlZmVyZW5jZSB0aG9zZSBmdW5jdGlvbnMgc2FmZWx5IGFuZCBpbiBhIHN0YXRpY2FsbHktdHlwZWQgbWFubmVyLlxuICovXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIFN3YWxQb3J0YWxUYXJnZXRzIHtcbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBtb2RhbCBjbG9zZSBidXR0b24gYmxvY2sgY29udGVudHMuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNsb3NlQnV0dG9uOiBTd2FsUG9ydGFsVGFyZ2V0ID0ge1xuICAgICAgICBlbGVtZW50OiBzd2FsID0+IHN3YWwuZ2V0Q2xvc2VCdXR0b24oKSxcbiAgICAgICAgb3B0aW9uczogeyBzaG93Q2xvc2VCdXR0b246IHRydWUgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBtb2RhbCB0aXRsZSBibG9jayBjb250ZW50cy5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVhZG9ubHkgdGl0bGU6IFN3YWxQb3J0YWxUYXJnZXQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHN3YWwgPT4gc3dhbC5nZXRUaXRsZSgpLFxuICAgICAgICAvLyBFbXB0eSB0ZXh0IHRoYXQgd2lsbCBuZXZlciBiZSBzaG93biBidXQgbmVjZXNzYXJ5IHNvIFN3ZWV0QWxlcnQyIG1ha2VzIHRoZSBkaXYgdmlzaWJsZS5cbiAgICAgICAgb3B0aW9uczogeyB0aXRsZTogJyAnIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgbW9kYWwgdGV4dCBibG9jayBjb250ZW50cyAodGhhdCBpcyBhbm90aGVyIGJsb2NrIGluc2lkZSB0aGUgZmlyc3QgY29udGVudCBibG9jaywgc28geW91IGNhbiBzdGlsbFxuICAgICAqIHVzZSBvdGhlciBtb2RhbCBmZWF0dXJlcyBsaWtlIFN3YWwgaW5wdXRzLCB0aGF0IGFyZSBzaXR1YXRlZCBpbnNpZGUgdGhhdCBwYXJlbnQgY29udGVudCBibG9jaykuXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRlbnQ6IFN3YWxQb3J0YWxUYXJnZXQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHN3YWwgPT4gc3dhbC5nZXRIdG1sQ29udGFpbmVyKCksXG4gICAgICAgIC8vIEVtcHR5IHRleHQgdGhhdCB3aWxsIG5ldmVyIGJlIHNob3duIGJ1dCBuZWNlc3Nhcnkgc28gU3dlZXRBbGVydDIgbWFrZXMgdGhlIGRpdiB2aXNpYmxlLlxuICAgICAgICBvcHRpb25zOiB7IHRleHQ6ICcgJyB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRhcmdldHMgdGhlIGFjdGlvbnMgYmxvY2sgY29udGVudHMsIHdoZXJlIGFyZSB0aGUgY29uZmlybSBhbmQgY2FuY2VsIGJ1dHRvbnMgaW4gYSBub3JtYWwgdGltZS5cbiAgICAgKiAvIVxcIFdBUk5JTkc6IHVzaW5nIHRoaXMgdGFyZ2V0IGRlc3Ryb3lzIHNvbWUgb2YgdGhlIG5hdGl2ZSBTd2VldEFsZXJ0MiBtb2RhbCdzIERPTSwgdGhlcmVmb3JlLCBpZiB5b3UgdXNlIHRoaXNcbiAgICAgKiAgICAgdGFyZ2V0LCBkbyBub3QgdXBkYXRlIHRoZSBtb2RhbCB2aWEgPHN3YWw+IEBJbnB1dHMgd2hpbGUgdGhlIG1vZGFsIGlzIG9wZW4sIG9yIHlvdSdsbCBnZXQgYW4gZXJyb3IuXG4gICAgICogICAgIFdlIGNvdWxkIHdvcmthcm91bmQgdGhhdCBpbmNvbnZlbmllbnQgaW5zaWRlIHRoaXMgaW50ZWdyYXRpb24sIGJ1dCB0aGF0J2QgYmUgZGV0cmltZW50YWwgdG8gbWVtb3J5IGFuZFxuICAgICAqICAgICBwZXJmb3JtYW5jZSBvZiBldmVyeW9uZSwgZm9yIGEgcmVsYXRpdmVseSByYXJlIHVzZSBjYXNlLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBhY3Rpb25zOiBTd2FsUG9ydGFsVGFyZ2V0ID0ge1xuICAgICAgICBlbGVtZW50OiBzd2FsID0+IHN3YWwuZ2V0QWN0aW9ucygpLFxuICAgICAgICAvLyBUaGUgYnV0dG9uIHdpbGwgbmV2ZXIgZXhpc3QsIGJ1dCBTd2VldEFsZXJ0MiBzaG93cyB0aGUgYWN0aW9ucyBibG9jayBvbmx5IGlmIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBidXR0b24uXG4gICAgICAgIG9wdGlvbnM6IHsgc2hvd0NvbmZpcm1CdXR0b246IHRydWUgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYXJnZXRzIHRoZSBjb25maXJtIGJ1dHRvbiBjb250ZW50cywgcmVwbGFjaW5nIHRoZSB0ZXh0IGluc2lkZSBpdCAobm90IHRoZSBidXR0b24gaXRzZWxmKVxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBjb25maXJtQnV0dG9uOiBTd2FsUG9ydGFsVGFyZ2V0ID0ge1xuICAgICAgICBlbGVtZW50OiBzd2FsID0+IHN3YWwuZ2V0Q29uZmlybUJ1dHRvbigpLFxuICAgICAgICBvcHRpb25zOiB7IHNob3dDb25maXJtQnV0dG9uOiB0cnVlIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgY2FuY2VsIGJ1dHRvbiBjb250ZW50cywgcmVwbGFjaW5nIHRoZSB0ZXh0IGluc2lkZSBpdCAobm90IHRoZSBidXR0b24gaXRzZWxmKVxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBjYW5jZWxCdXR0b246IFN3YWxQb3J0YWxUYXJnZXQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHN3YWwgPT4gc3dhbC5nZXRDYW5jZWxCdXR0b24oKSxcbiAgICAgICAgb3B0aW9uczogeyBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFyZ2V0cyB0aGUgbW9kYWwgZm9vdGVyIGNvbnRlbnRzLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWFkb25seSBmb290ZXI6IFN3YWxQb3J0YWxUYXJnZXQgPSB7XG4gICAgICAgIGVsZW1lbnQ6IHN3YWwgPT4gc3dhbC5nZXRGb290ZXIoKSxcbiAgICAgICAgLy8gRW1wdHkgdGV4dCB0aGF0IHdpbGwgbmV2ZXIgYmUgc2hvd24gYnV0IG5lY2Vzc2FyeSBzbyBTd2VldEFsZXJ0MiBtYWtlcyB0aGUgZGl2IHZpc2libGUuXG4gICAgICAgIG9wdGlvbnM6IHsgZm9vdGVyOiAnICcgfVxuICAgIH07XG59XG4iXX0=